<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd 
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="cn.bdqn.datacockpit.service.impl,cn.bdqn.datacockpit.utils" />

	<context:property-placeholder location="classpath*:jdbc.properties" />
	<!-- JDBC操作模板 --> 
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<constructor-arg>
			<ref bean="basicDataSource"/>
		</constructor-arg>
	</bean>		
	
	<!-- 用于初始化获得Spring对象的类 -->  
    <bean id="springfactory" class="cn.bdqn.datacockpit.utils.SpringFactory"></bean> 

	<!-- 读取数据库配置文件 -->
    <context:property-placeholder location="classpath:jdbc.properties" />

	<!-- 配置数据源 -->
	<bean id="basicDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" scope="singleton">
		<property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="maxActive" value="30" />
        <property name="maxIdle" value="5" />
	</bean>

	<!-- 扫描保存sql语句的xml文件 -->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 配置数据源 -->
		<property name="dataSource" ref="basicDataSource"></property>
		<!-- 指定xml文件所在的包路径 -->
		<property name="mapperLocations" value="classpath*:cn/bdqn/datacockpit/mapper/*.xml"></property>
	</bean>

	<!-- 扫描dao层中的java接口类 -->
	<bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="cn.bdqn.datacockpit.mapper"></property>
	</bean>

	<!-- 配置事务 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="basicDataSource" />
	</bean>
	<!-- 事务注解驱动 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
		
		
 <!-- 自定义Realm -->
		 <bean id="myRealm" class="cn.bdqn.datacockpit.realm.MyRealm"/>  
		
		
		<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
	  	  <property name="realm" ref="myRealm"/>  
		</bean>  
		
		
		<bean id="ShiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
		   
		    <property name="securityManager" ref="securityManager"/>
		
		   <property name="loginUrl" value="/login.jsp"/> 
		  
		    <property name="unauthorizedUrl" value="/login.jsp"/>  
		       
		    <property name="filterChainDefinitions">  
		        <value>  
		            /login.jsp=anon           
		            /pages/register.jsp=anon
		            /pages/wangjimima.jsp=anon
		            /pages/yonghuxieyi.jsp=anon
		            /getYzm=anon
		            *.shtml=anon
		        </value>  
		    </property>
		</bean>  
		
		
		<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>  
		
	
		<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>  
	  		<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
	  	  <property name="securityManager" ref="securityManager"/>  
	    </bean>  
	    
	
</beans>
